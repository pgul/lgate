dnl $Id$
dnl Process this file with autoconf to produce a configure script.
AC_INIT(attach/attach.c)

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PATH_PROG(PERL, perl, perl)

CFLAGS="-Wall -Wno-char-subscripts -funsigned-char"
LDFLAGS="-Wall"

dnl Checks for header files.
AC_CHECK_HEADERS(unistd.h io.h string.h alloca.h dirent.h malloc.h)
case $ac_cv_header_malloc_h in
  no) AC_CHECK_HEADER(alloc.h) ;;
esac
AC_CHECK_HEADERS(utime.h)
case $ac_cv_header_utime_h in
  no) AC_CHECK_HEADER(sys/utime.h) ;;
esac
AC_CHECK_HEADERS(sysexits.h sys/file.h sys/param.h netinet/in.h sys/wait.h)
AC_CHECK_HEADERS(arpa/inet.h direct.h share.h process.h dos.h syslog.h)
AC_CHECK_HEADERS(sys/time.h libgen.h pwd.h)

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.
AC_CHECK_FUNCS(snprintf ftruncate pipe filelength basename)
AC_CHECK_FUNCS(strcasecmp stricmp strncasecmp strnicmp)
AC_CHECK_FUNCS(strsignal mktime sopen strupr utime flock)
AC_CHECK_FUNCS(getuid geteuid getgid getegid getpwuid setuid)
case $ac_cv_func_flock in
 no) AC_CHECK_FUNCS(lockf) ;;
esac

dnl -------------------------------------------------------------------------
dnl Check for isascii()

AC_MSG_CHECKING(for isascii)
AC_TRY_COMPILE([
#include <ctype.h>
], [
  return isascii(32);
], AC_DEFINE(HAVE_ISASCII) AC_MSG_RESULT(yes),
AC_MSG_RESULT(no),
AC_MSG_RESULT(cross-compiling. No assumptions made)
)

dnl -------------------------------------------------------------------------
dnl Check for htons

AC_MSG_CHECKING(for htons)
AC_TRY_LINK([
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_ARPA_INET_H
#include <arpa/inet.h>
#endif
], [
  return htons(1);
], AC_DEFINE(HAVE_HTONS) ac_cv_func_htons=yes; AC_MSG_RESULT(yes),
ac_cv_func_htons=no; AC_MSG_RESULT(no)
)

dnl -------------------------------------------------------------------------
dnl Check for htons in -lxnet

case $ac_cv_func_htons in
 no)
  AC_MSG_CHECKING(for htons in -lxnet)
  OLD_LIBS=$LIBS
  LIBS="$LIBS -lxnet"
  AC_TRY_LINK([
  #ifdef HAVE_UNISTD_H
  #include <unistd.h>
  #endif
  #ifdef HAVE_SYS_PARAM_H
  #include <sys/param.h>
  #endif
  #ifdef HAVE_NETINET_IN_H
  #include <netinet/in.h>
  #endif
  #ifdef HAVE_ARPA_INET_H
  #include <arpa/inet.h>
  #endif
  ], [
    return htons(1);
  ], AC_DEFINE(HAVE_HTONS) ac_cv_func_htons=yes; AC_MSG_RESULT(yes),
  ac_cv_func_htons=no; AC_MSG_RESULT(no)
  )
  LIBS=$OLD_LIBS ;;
esac

dnl -------------------------------------------------------------------------
dnl Check for sys_signame

AC_MSG_CHECKING(for sys_signame)
AC_TRY_COMPILE([
#include <signal.h>
], [
  return sys_signame[1];
], AC_DEFINE(HAVE_SYS_SIGNAME) AC_MSG_RESULT(yes),
AC_MSG_RESULT(no)
)

dnl -------------------------------------------------------------------------
dnl Check for char **environ

AC_MSG_CHECKING(for char **environ)
ENV_TEST=test_env
export ENV_TEST
AC_TRY_RUN([
#include <string.h>
#include <stdlib.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
main()
{
char **p;
for (p=environ; *p; p++)
  if (strchr(*p, '=')==NULL) exit(1);
  else if (strcmp(*p, "ENV_TEST=test_env")==0) exit(0);
exit(1);
}
], AC_DEFINE(HAVE_ENVIRON) ac_cv_var_environ=yes; AC_MSG_RESULT(yes),
ac_cv_var_environ=no; AC_MSG_RESULT(no),
AC_MSG_RESULT(cross-compiling. No assumptions made)
)

case $ac_cv_var_environ in
  no)
    AC_MSG_CHECKING(for char **__environ)
    AC_TRY_RUN([
    #include <string.h>
    #include <stdlib.h>
    #ifdef HAVE_UNISTD_H
    #include <unistd.h>
    #endif
    main()
    {
    char **p;
    for (p=__environ; *p; p++)
      if (strchr(*p, '=')==NULL) exit(1);
      else if (strcmp(*p, "ENV_TEST=test_env")==0) exit(0);
    exit(1);
    }
    ], AC_DEFINE(HAVE___ENVIRON) AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no),
    AC_MSG_RESULT(cross-compiling. No assumptions made)
    )
 ;;
esac

case $ac_cv_header_alloca_h in
  no)
    AC_DEFINE(REGEX_MALLOC) ;;
esac

dnl -------------------------------------------------------------------------
dnl Check for libperl

AC_ARG_WITH(perl,
            [  --with-perl             perl hooks support (default no)],
            do_perl=yes, do_perl=no)

AC_SUBST(PERLCFLAGS)
AC_SUBST(PERLLIBS)

case x$do_perl in
  xyes)
   AC_MSG_CHECKING(for libperl)
   PERLDIR=`$PERL -MConfig -e 'print $Config{archlib}' 2>/dev/null`
   if PERLCFLAGS=`$PERL -MExtUtils::Embed -e ccopts 2>/dev/null`
   then
     PERLLIBS=`$PERL -MExtUtils::Embed -e ldopts`
     case x$PERLDIR in
       x)
         AC_MSG_RESULT(yes)
         ;;
       *)
         AC_MSG_RESULT($PERLDIR)
         ;;
     esac
   else
     case x$PERLDIR in
       x)
         AC_MSG_RESULT(no)
         ;;
       *)
         PERLCFLAGS="-I$PERLDIR/CORE -Dbool=char -DHAS_BOOL"
         PERLLIBS="$PERLDIR/auto/DynaLoader/DynaLoader.a -L$PERLDIR/CORE -lperl -ldl -lcrypt -lm"
         AC_CHECK_LIB(dl, main, PERLLIBS="$PERLLIBS -ldl")
         AC_CHECK_LIB(crypt, main, PERLLIBS="$PERLLIBS -lcrypt")
         AC_CHECK_LIB(m, main, PERLLIBS="$PERLLIBS -lm")
         AC_CHECK_LIB(socket, main, PERLLIBS="$PERLLIBS -lsocket")
         AC_MSG_RESULT($PERLDIR)
         ;;
     esac
   fi
   ;;
esac

case x$PERLCFLAGS in
  x)
    ;;
  *)
    AC_MSG_CHECKING(for working libperl)
    OLD_LIBS=$LIBS
    OLD_CFLAGS=$CFLAGS
    LIBS="$LIBS $PERLLIBS"
    CFLAGS="$CFLAGS $PERLCFLAGS"
    AC_TRY_RUN([
     #include <EXTERN.h>
     #include <perl.h>
     PerlInterpreter *my_perl;
     void boot_DynaLoader(CV *cv);
     void xs_init(void)
     { dXSUB_SYS;
       newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, "callperl");
     }
     int main(int argc, char **argv, char **env)
     {
     char *embedding[] = { "", "-e", "sub test { \$var='a' if \$var eq 'v'; return \$_[0]; }", NULL };
     SV *var;
     char *retval;
     STRLEN n_a;
     my_perl = perl_alloc();
     perl_construct(my_perl);
     if (perl_parse(my_perl, xs_init, 3, embedding, NULL))
       return 1;
     perl_run(my_perl);
     var=perl_get_sv("var", TRUE);
     { dSP;
     sv_setpv(var, "v");
     ENTER;
     SAVETMPS;
     PUSHMARK(SP);
     XPUSHs(sv_2mortal(newSVpv("arg",0)));
     PUTBACK;
     perl_call_pv("test", G_SCALAR);
     SPAGAIN;
     retval=strdup(POPp);
     PUTBACK;
     FREETMPS;
     LEAVE;
     }
     if (strcmp(SvPV(perl_get_sv("var", FALSE),n_a), "a") || strcmp(retval, "arg"))
       return 2;
     perl_destruct(my_perl);
     perl_free(my_perl);
     return 0;
     }
     ],
     AC_DEFINE(DO_PERL) AC_MSG_RESULT(yes); WORKING_PERL=yes,
     AC_MSG_RESULT(no); PERLCFLAGS=""; PERLLIBS="",
     AC_MSG_RESULT(cross-compiling. No assumptions made)
       PERLCFLAGS=""; PERLLIBS=""
    )
    CFLAGS="$OLD_CFLAGS"
    LIBS="$OLD_LIBS"
    ;;
esac

AC_ARG_WITH(debug,
            [  --with-debug            generate debug info (default no)],
            debug=yes, debug=no)

case x$debug in
  xyes)	CFLAGS="$CFLAGS -g"
	LDFLAGS="$LDFLAGS -g"
	;;
  *)	CFLAGS="$CFLAGS -O2 -s"
	LDFLAGS="$LDFLAGS -O2 -s"
	;;
esac

dnl -------------------------------------------------------------------------

AC_OUTPUT(fidolib/Makefile lib/Makefile attach/Makefile fido2rel/Makefile rel2fido/Makefile forward/Makefile minstall)
